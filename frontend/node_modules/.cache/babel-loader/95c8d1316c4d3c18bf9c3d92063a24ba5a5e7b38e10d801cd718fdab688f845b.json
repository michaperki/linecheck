{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport UploadPage from \"./pages/UploadPage\";\nimport AnalysisPage from \"./pages/AnalysisPage\";\nimport DataDisplay from \"./components/DataDisplay\";\nimport Header from \"./components/Header\";\nimport { getFirstFrameUrl, generateVideoId, sendGridSelection } from \"./utils/mockApiUtils\"; // Import the necessary utility functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [firstFrameUrl, setFirstFrameUrl] = useState(null);\n  const [videoId, setVideoId] = useState(\"\"); // Initialize videoId as an empty string\n\n  useEffect(() => {\n    // Fetch the first frame URL and video ID when the component mounts\n    fetchFirstFrameData();\n  }, []);\n  const fetchFirstFrameData = async () => {\n    try {\n      // Simulate fetching data from the API\n      const response = await getFirstFrameUrl(videoId);\n\n      // Set the first frame URL and video ID in state\n      setFirstFrameUrl(response.url);\n      setVideoId(response.videoId);\n    } catch (error) {\n      console.error(\"Error fetching first frame data:\", error);\n    }\n  };\n  const handleGridSelection = async selectedSquares => {\n    try {\n      // Send grid selection to the backend\n      const response = await sendGridSelection(videoId, selectedSquares);\n      if (response.success) {\n        alert('Selection submitted successfully!');\n      }\n    } catch (error) {\n      console.error(\"Error sending grid selection:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/upload\",\n          element: /*#__PURE__*/_jsxDEV(UploadPage, {\n            setVideoId: setVideoId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analysis\",\n          element: /*#__PURE__*/_jsxDEV(AnalysisPage, {\n            firstFrameUrl: firstFrameUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analysis/:videoId\",\n          element: /*#__PURE__*/_jsxDEV(AnalysisPage, {\n            firstFrameUrl: firstFrameUrl,\n            handleGridSelection: handleGridSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/data/:videoId\",\n          element: /*#__PURE__*/_jsxDEV(DataDisplay, {\n            videoId: videoId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 22\n          }, this) // Pass the generated video ID to DataDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pOTKucJbEzqGvVmmwlT5nYgz7hk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","HomePage","UploadPage","AnalysisPage","DataDisplay","Header","getFirstFrameUrl","generateVideoId","sendGridSelection","jsxDEV","_jsxDEV","App","_s","firstFrameUrl","setFirstFrameUrl","videoId","setVideoId","fetchFirstFrameData","response","url","error","console","handleGridSelection","selectedSquares","success","alert","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport UploadPage from \"./pages/UploadPage\";\nimport AnalysisPage from \"./pages/AnalysisPage\";\nimport DataDisplay from \"./components/DataDisplay\";\nimport Header from \"./components/Header\";\nimport { getFirstFrameUrl, generateVideoId, sendGridSelection } from \"./utils/mockApiUtils\"; // Import the necessary utility functions\n\nfunction App() {\n  const [firstFrameUrl, setFirstFrameUrl] = useState(null);\n  const [videoId, setVideoId] = useState(\"\"); // Initialize videoId as an empty string\n\n  useEffect(() => {\n    // Fetch the first frame URL and video ID when the component mounts\n    fetchFirstFrameData();\n  }, []);\n\n  const fetchFirstFrameData = async () => {\n    try {\n      // Simulate fetching data from the API\n      const response = await getFirstFrameUrl(videoId);\n\n      // Set the first frame URL and video ID in state\n      setFirstFrameUrl(response.url);\n      setVideoId(response.videoId);\n    } catch (error) {\n      console.error(\"Error fetching first frame data:\", error);\n    }\n  };\n\n  const handleGridSelection = async (selectedSquares) => {\n    try {\n      // Send grid selection to the backend\n      const response = await sendGridSelection(videoId, selectedSquares);\n      if (response.success) {\n        alert('Selection submitted successfully!');\n      }\n    } catch (error) {\n      console.error(\"Error sending grid selection:\", error);\n    }\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/upload\" element={<UploadPage setVideoId={setVideoId}/>} />\n          <Route\n            path=\"/analysis\"\n            element={<AnalysisPage firstFrameUrl={firstFrameUrl} />}\n          />\n          <Route\n            path=\"/analysis/:videoId\"\n            element={\n              <AnalysisPage\n                firstFrameUrl={firstFrameUrl}\n                handleGridSelection={handleGridSelection}\n              />\n            }\n          />\n          <Route\n            path=\"/data/:videoId\"\n            element={<DataDisplay videoId={videoId} />} // Pass the generated video ID to DataDisplay\n          />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
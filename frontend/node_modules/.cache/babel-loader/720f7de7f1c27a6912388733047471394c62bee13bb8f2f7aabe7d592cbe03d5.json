{"ast":null,"code":"// utils/mockApiUtils.js\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  const numbers = \"0123456789\";\n\n  // Generate a random 6 digit number\n  let videoId = \"\";\n  for (let i = 0; i < 6; i++) {\n    videoId += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n  return videoId;\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async videoFile => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock response with a generated video_id\n  const videoId = generateVideoId(); // You can create a function to generate unique video ids\n  return {\n    success: true,\n    videoId\n  };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Translate the first character of the video id to a number, either 1, 2, or 3\n  console.log(videoId[0]);\n  const frameNumber = parseInt(videoId[0]) % 3 + 1;\n  console.log(frameNumber);\n\n  // Return the mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + `/test_frame_${frameNumber}.jpg`;\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async selectedQuadrants => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["generateVideoId","numbers","videoId","i","charAt","Math","floor","random","length","uploadVideo","videoFile","Promise","resolve","setTimeout","success","getAnalysisResults","mockResults","analysisType","getFirstFrameUrl","console","log","frameNumber","parseInt","process","env","PUBLIC_URL","sendGridSelection","selectedQuadrants"],"sources":["/root/Projects/linecheck/frontend/src/utils/mockApiUtils.js"],"sourcesContent":["// utils/mockApiUtils.js\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  const numbers = \"0123456789\";\n\n  // Generate a random 6 digit number\n  let videoId = \"\";\n  for (let i = 0; i < 6; i++) {\n    videoId += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n\n  return videoId;\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async (videoFile) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock response with a generated video_id\n  const videoId = generateVideoId(); // You can create a function to generate unique video ids\n  return { success: true, videoId };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId,\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Translate the first character of the video id to a number, either 1, 2, or 3\n  console.log(videoId[0])\n  const frameNumber = parseInt(videoId[0]) % 3 + 1;\n  console.log(frameNumber)\n\n  // Return the mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + `/test_frame_${frameNumber}.jpg`;\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async (selectedQuadrants) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return { success: true };\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,OAAO,GAAG,YAAY;;EAE5B;EACA,IAAIC,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,OAAO,IAAID,OAAO,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,OAAO,CAACO,MAAM,CAAC,CAAC;EACvE;EAEA,OAAON,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMO,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMV,OAAO,GAAGF,eAAe,CAAC,CAAC,CAAC,CAAC;EACnC,OAAO;IAAEc,OAAO,EAAE,IAAI;IAAEZ;EAAQ,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMa,kBAAkB,GAAG,MAAOb,OAAO,IAAK;EACnD;EACA,MAAM,IAAIS,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMI,WAAW,GAAG;IAClBC,YAAY,EAAE,uBAAuB;IACrCf,OAAO,EAAEA;IACT;EACF,CAAC;;EAED,OAAOc,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOhB,OAAO,IAAK;EACjD;EACA,MAAM,IAAIS,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACAO,OAAO,CAACC,GAAG,CAAClB,OAAO,CAAC,CAAC,CAAC,CAAC;EACvB,MAAMmB,WAAW,GAAGC,QAAQ,CAACpB,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAChDiB,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;;EAExB;EACA,OAAOE,OAAO,CAACC,GAAG,CAACC,UAAU,GAAI,eAAcJ,WAAY,MAAK;AAClE,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAOC,iBAAiB,IAAK;EAC5D;EACA,MAAM,IAAIhB,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEE,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
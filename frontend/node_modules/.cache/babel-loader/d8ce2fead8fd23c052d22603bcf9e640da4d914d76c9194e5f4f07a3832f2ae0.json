{"ast":null,"code":"// utils/mockApiUtils.js\n\n// Mock function to simulate video upload\nexport const uploadVideo = async videoFile => {\n  // Simulate uploading by waiting for a short time\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return a mock response with a video ID\n  return {\n    videoId: \"mocked-video-id\"\n  };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + \"/test_frame.jpg\";\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async selectedQuadrants => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["uploadVideo","videoFile","Promise","resolve","setTimeout","videoId","getAnalysisResults","mockResults","analysisType","getFirstFrameUrl","process","env","PUBLIC_URL","sendGridSelection","selectedQuadrants","success"],"sources":["/root/Projects/linecheck/frontend/src/utils/mockApiUtils.js"],"sourcesContent":["// utils/mockApiUtils.js\n\n// Mock function to simulate video upload\nexport const uploadVideo = async (videoFile) => {\n  // Simulate uploading by waiting for a short time\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Return a mock response with a video ID\n  return { videoId: \"mocked-video-id\" };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId,\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Return mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + \"/test_frame.jpg\";\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async (selectedQuadrants) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return { success: true };\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEE,OAAO,EAAE;EAAkB,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOD,OAAO,IAAK;EACnD;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMI,WAAW,GAAG;IAClBC,YAAY,EAAE,uBAAuB;IACrCH,OAAO,EAAEA;IACT;EACF,CAAC;;EAED,OAAOE,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOJ,OAAO,IAAK;EACjD;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAOO,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,iBAAiB;AACnD,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,iBAAiB,IAAK;EAC5D;EACA,MAAM,IAAIZ,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEY,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
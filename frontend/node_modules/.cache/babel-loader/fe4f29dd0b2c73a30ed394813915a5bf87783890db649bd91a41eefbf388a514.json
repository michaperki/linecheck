{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/RegionSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ImageDisplay from './ImageDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionSelector = ({\n  firstFrameUrl,\n  handleGridSelection\n}) => {\n  _s();\n  const [selectedSquares, setSelectedSquares] = useState([]); // Array to store selected grid squares\n\n  const handleSquareClick = squareIndex => {\n    // Toggle the selection state of the clicked square\n    if (selectedSquares.includes(squareIndex)) {\n      setSelectedSquares(selectedSquares.filter(index => index !== squareIndex));\n    } else {\n      setSelectedSquares([...selectedSquares, squareIndex]);\n    }\n  };\n  const handleSubmit = () => {\n    // Call the handleGridSelection function from props to send grid selection\n    if (selectedSquares.length > 0) {\n      handleGridSelection(selectedSquares);\n    } else {\n      alert('Please select at least one grid square.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"region-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Regions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageDisplay, {\n      firstFrameUrl: firstFrameUrl,\n      selectedSquares: selectedSquares,\n      onSquareClick: handleSquareClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      disabled: selectedSquares.length === 0,\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionSelector, \"eM1G53BLjDBPo55FpKLD6OadD1Y=\");\n_c = RegionSelector;\nexport default RegionSelector;\nvar _c;\n$RefreshReg$(_c, \"RegionSelector\");","map":{"version":3,"names":["React","useState","ImageDisplay","jsxDEV","_jsxDEV","RegionSelector","firstFrameUrl","handleGridSelection","_s","selectedSquares","setSelectedSquares","handleSquareClick","squareIndex","includes","filter","index","handleSubmit","length","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSquareClick","disabled","onClick","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/RegionSelector.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ImageDisplay from './ImageDisplay';\n\nconst RegionSelector = ({ firstFrameUrl, handleGridSelection }) => {\n  const [selectedSquares, setSelectedSquares] = useState([]); // Array to store selected grid squares\n\n  const handleSquareClick = (squareIndex) => {\n    // Toggle the selection state of the clicked square\n    if (selectedSquares.includes(squareIndex)) {\n      setSelectedSquares(selectedSquares.filter((index) => index !== squareIndex));\n    } else {\n      setSelectedSquares([...selectedSquares, squareIndex]);\n    }\n  };\n\n  const handleSubmit = () => {\n    // Call the handleGridSelection function from props to send grid selection\n    if (selectedSquares.length > 0) {\n      handleGridSelection(selectedSquares);\n    } else {\n      alert('Please select at least one grid square.');\n    }\n  };\n\n  return (\n    <div className=\"region-selector\">\n      <h3>Select Regions</h3>\n      <ImageDisplay\n        firstFrameUrl={firstFrameUrl}\n        selectedSquares={selectedSquares}\n        onSquareClick={handleSquareClick}\n      />\n      <button\n        className=\"submit-button\"\n        disabled={selectedSquares.length === 0}\n        onClick={handleSubmit}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default RegionSelector;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5D,MAAMU,iBAAiB,GAAIC,WAAW,IAAK;IACzC;IACA,IAAIH,eAAe,CAACI,QAAQ,CAACD,WAAW,CAAC,EAAE;MACzCF,kBAAkB,CAACD,eAAe,CAACK,MAAM,CAAEC,KAAK,IAAKA,KAAK,KAAKH,WAAW,CAAC,CAAC;IAC9E,CAAC,MAAM;MACLF,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEG,WAAW,CAAC,CAAC;IACvD;EACF,CAAC;EAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,IAAIP,eAAe,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC9BV,mBAAmB,CAACE,eAAe,CAAC;IACtC,CAAC,MAAM;MACLS,KAAK,CAAC,yCAAyC,CAAC;IAClD;EACF,CAAC;EAED,oBACEd,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhB,OAAA;MAAAgB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBpB,OAAA,CAACF,YAAY;MACXI,aAAa,EAAEA,aAAc;MAC7BG,eAAe,EAAEA,eAAgB;MACjCgB,aAAa,EAAEd;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFpB,OAAA;MACEe,SAAS,EAAC,eAAe;MACzBO,QAAQ,EAAEjB,eAAe,CAACQ,MAAM,KAAK,CAAE;MACvCU,OAAO,EAAEX,YAAa;MAAAI,QAAA,EACvB;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChB,EAAA,CAtCIH,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAwCpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
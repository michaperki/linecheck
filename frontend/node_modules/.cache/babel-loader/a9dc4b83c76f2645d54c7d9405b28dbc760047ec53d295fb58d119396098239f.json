{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/RegionSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ImageDisplay from \"./ImageDisplay\";\nimport ThumbnailDisplay from \"./ThumbnailDisplay\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionSelector = ({\n  firstFrameUrl,\n  thumbnailUrls,\n  handleGridSelection\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    videoId\n  } = useParams();\n  const [selectedSquaresStack, setSelectedSquaresStack] = useState([]);\n  const [selectedSquaresHoleCards, setSelectedSquaresHoleCards] = useState([]);\n  const [selectedSquaresOpponent, setSelectedSquaresOpponent] = useState([]);\n  const [currentMode, setCurrentMode] = useState(\"Stack\");\n  const handleSquareClick = squareIndex => {\n    switch (currentMode) {\n      case \"Stack\":\n        if (selectedSquaresStack.includes(squareIndex)) {\n          setSelectedSquaresStack(selectedSquaresStack.filter(index => index !== squareIndex));\n        } else {\n          setSelectedSquaresStack([...selectedSquaresStack, squareIndex]);\n        }\n        break;\n      case \"Opponent\":\n        if (selectedSquaresOpponent.includes(squareIndex)) {\n          setSelectedSquaresOpponent(selectedSquaresOpponent.filter(index => index !== squareIndex));\n        } else {\n          setSelectedSquaresOpponent([...selectedSquaresOpponent, squareIndex]);\n        }\n        break;\n      case \"HoleCards\":\n        if (selectedSquaresHoleCards.includes(squareIndex)) {\n          setSelectedSquaresHoleCards(selectedSquaresHoleCards.filter(index => index !== squareIndex));\n        } else {\n          setSelectedSquaresHoleCards([...selectedSquaresHoleCards, squareIndex]);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  const handleClear = () => {\n    if (currentMode === \"Stack\") {\n      setSelectedSquaresStack([]);\n    } else if (currentMode === \"Opponent\") {\n      setSelectedSquaresOpponent([]);\n    } else if (currentMode === \"HoleCards\") {\n      setSelectedSquaresHoleCards([]);\n    }\n  };\n  const handleSubmit = () => {\n    // Combine the selected squares from both modes into a data structure that the backend expects\n    const selectedSquares = [...selectedSquaresStack.map(index => ({\n      index,\n      type: \"Stack\"\n    })), ...selectedSquaresOpponent.map(index => ({\n      index,\n      type: \"Opponent\"\n    })), ...selectedSquaresHoleCards.map(index => ({\n      index,\n      type: \"HoleCards\"\n    }))];\n    console.log(selectedSquares);\n    if (selectedSquares.length > 0) {\n      handleGridSelection(selectedSquares, currentMode); // Pass mode to the handler\n      navigate(`/data/${videoId}`);\n    } else {\n      alert(\"Please select at least one square.\");\n    }\n  };\n  const handleModeChange = mode => {\n    setCurrentMode(mode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"region-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Regions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prompt\",\n      children: currentMode === \"Stack\" ? \"Select the stack\" : currentMode === \"Opponent\" ? \"Select the opponent\" : \"Select the hole cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"Stack\"),\n      children: \"Select Stack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"HoleCards\"),\n      children: \"Select Hole Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"Opponent\"),\n      children: \"Select Opponent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageDisplay, {\n      firstFrameUrl: firstFrameUrl,\n      selectedSquares: currentMode === \"Stack\" ? selectedSquaresStack : currentMode === \"Opponent\" ? selectedSquaresOpponent : selectedSquaresHoleCards,\n      onSquareClick: handleSquareClick,\n      currentMode: currentMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThumbnailDisplay, {\n      thumbnailUrls: thumbnailUrls,\n      onThumbnailClick: handleSquareClick // Reusing the same click handler for thumbnails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      disabled: currentMode === \"Stack\" && selectedSquaresStack.length === 0 || currentMode === \"Opponent\" && selectedSquaresOpponent.length === 0 || currentMode === \"HoleCards\" && selectedSquaresHoleCards.length === 0,\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionSelector, \"RuBQBkUm7Q7y4ufTatgtVHKFS5I=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = RegionSelector;\nexport default RegionSelector;\nvar _c;\n$RefreshReg$(_c, \"RegionSelector\");","map":{"version":3,"names":["React","useState","ImageDisplay","ThumbnailDisplay","useNavigate","useParams","jsxDEV","_jsxDEV","RegionSelector","firstFrameUrl","thumbnailUrls","handleGridSelection","_s","navigate","videoId","selectedSquaresStack","setSelectedSquaresStack","selectedSquaresHoleCards","setSelectedSquaresHoleCards","selectedSquaresOpponent","setSelectedSquaresOpponent","currentMode","setCurrentMode","handleSquareClick","squareIndex","includes","filter","index","handleClear","handleSubmit","selectedSquares","map","type","console","log","length","alert","handleModeChange","mode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSquareClick","onThumbnailClick","disabled","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/RegionSelector.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ImageDisplay from \"./ImageDisplay\";\nimport ThumbnailDisplay from \"./ThumbnailDisplay\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\n\nconst RegionSelector = ({\n  firstFrameUrl,\n  thumbnailUrls,\n  handleGridSelection,\n}) => {\n  const navigate = useNavigate();\n\n  const { videoId } = useParams();\n\n  const [selectedSquaresStack, setSelectedSquaresStack] = useState([]);\n  const [selectedSquaresHoleCards, setSelectedSquaresHoleCards] = useState([]);\n  const [selectedSquaresOpponent, setSelectedSquaresOpponent] = useState([]);\n  const [currentMode, setCurrentMode] = useState(\"Stack\");\n\n  const handleSquareClick = (squareIndex) => {\n    switch (currentMode) {\n      case \"Stack\":\n        if (selectedSquaresStack.includes(squareIndex)) {\n          setSelectedSquaresStack(\n            selectedSquaresStack.filter((index) => index !== squareIndex)\n          );\n        } else {\n          setSelectedSquaresStack([...selectedSquaresStack, squareIndex]);\n        }\n        break;\n      case \"Opponent\":\n        if (selectedSquaresOpponent.includes(squareIndex)) {\n          setSelectedSquaresOpponent(\n            selectedSquaresOpponent.filter((index) => index !== squareIndex)\n          );\n        } else {\n          setSelectedSquaresOpponent([...selectedSquaresOpponent, squareIndex]);\n        }\n        break;\n      case \"HoleCards\":\n        if (selectedSquaresHoleCards.includes(squareIndex)) {\n          setSelectedSquaresHoleCards(\n            selectedSquaresHoleCards.filter((index) => index !== squareIndex)\n          );\n        } else {\n          setSelectedSquaresHoleCards([\n            ...selectedSquaresHoleCards,\n            squareIndex,\n          ]);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleClear = () => {\n    if (currentMode === \"Stack\") {\n      setSelectedSquaresStack([]);\n    } else if (currentMode === \"Opponent\") {\n      setSelectedSquaresOpponent([]);\n    } else if (currentMode === \"HoleCards\") {\n      setSelectedSquaresHoleCards([]);\n    }\n  };\n\n  const handleSubmit = () => {\n    // Combine the selected squares from both modes into a data structure that the backend expects\n    const selectedSquares = [\n      ...selectedSquaresStack.map((index) => ({ index, type: \"Stack\" })),\n      ...selectedSquaresOpponent.map((index) => ({ index, type: \"Opponent\" })),\n      ...selectedSquaresHoleCards.map((index) => ({\n        index,\n        type: \"HoleCards\",\n      })),\n    ];\n\n    console.log(selectedSquares);\n\n    if (selectedSquares.length > 0) {\n      handleGridSelection(selectedSquares, currentMode); // Pass mode to the handler\n      navigate(`/data/${videoId}`);\n    } else {\n      alert(\"Please select at least one square.\");\n    }\n  };\n\n  const handleModeChange = (mode) => {\n    setCurrentMode(mode);\n  };\n\n  return (\n    <div className=\"region-selector\">\n      <h3>Select Regions</h3>\n      <div className=\"prompt\">\n        {currentMode === \"Stack\"\n          ? \"Select the stack\"\n          : currentMode === \"Opponent\"\n          ? \"Select the opponent\"\n          : \"Select the hole cards\"}\n      </div>\n      <button onClick={() => handleModeChange(\"Stack\")}>Select Stack</button>\n      <button onClick={() => handleModeChange(\"HoleCards\")}>\n        Select Hole Cards\n      </button>\n      <button onClick={() => handleModeChange(\"Opponent\")}>\n        Select Opponent\n      </button>\n      <button onClick={handleClear}>Clear</button>\n      <ImageDisplay\n        firstFrameUrl={firstFrameUrl}\n        selectedSquares={\n          currentMode === \"Stack\"\n            ? selectedSquaresStack\n            : currentMode === \"Opponent\"\n            ? selectedSquaresOpponent\n            : selectedSquaresHoleCards\n        }\n        onSquareClick={handleSquareClick}\n        currentMode={currentMode}\n      />\n      <ThumbnailDisplay\n        thumbnailUrls={thumbnailUrls}\n        onThumbnailClick={handleSquareClick} // Reusing the same click handler for thumbnails\n      />\n      <button\n        className=\"submit-button\"\n        disabled={\n          (currentMode === \"Stack\" && selectedSquaresStack.length === 0) ||\n          (currentMode === \"Opponent\" && selectedSquaresOpponent.length === 0) ||\n          (currentMode === \"HoleCards\" && selectedSquaresHoleCards.length === 0)\n        }\n        onClick={handleSubmit}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default RegionSelector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// utils/mockApiUtils.js\n\n// Mock function to simulate video upload\nexport const uploadVideo = async videoFile => {\n  // Simulate uploading by waiting for a short time\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return a mock response with a video ID\n  return {\n    videoId: 'mocked-video-id'\n  };\n};\n\n// Mock function to simulate retrieving analysis results\nexport const getAnalysisResults = async videoId => {\n  // Simulate fetching analysis results by waiting for a short time\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return mock analysis results\n  return {\n    hands: [{\n      player: 'User',\n      cards: ['A♠', 'K♠'],\n      action: 'Raise'\n    }, {\n      player: 'Opponent',\n      cards: ['Q♣', 'J♣'],\n      action: 'Call'\n    }\n    // ...more hands\n    ],\n\n    stackSizes: {\n      user: 1000,\n      opponent: 800\n    }\n  };\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + '/test_frame.jpg';\n};","map":{"version":3,"names":["uploadVideo","videoFile","Promise","resolve","setTimeout","videoId","getAnalysisResults","hands","player","cards","action","stackSizes","user","opponent","getFirstFrameUrl","process","env","PUBLIC_URL"],"sources":["/root/Projects/linecheck/frontend/src/utils/mockApiUtils.js"],"sourcesContent":["// utils/mockApiUtils.js\n\n// Mock function to simulate video upload\nexport const uploadVideo = async (videoFile) => {\n    // Simulate uploading by waiting for a short time\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  \n    // Return a mock response with a video ID\n    return { videoId: 'mocked-video-id' };\n  };\n  \n  // Mock function to simulate retrieving analysis results\n  export const getAnalysisResults = async (videoId) => {\n    // Simulate fetching analysis results by waiting for a short time\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  \n    // Return mock analysis results\n    return {\n      hands: [\n        { player: 'User', cards: ['A♠', 'K♠'], action: 'Raise' },\n        { player: 'Opponent', cards: ['Q♣', 'J♣'], action: 'Call' },\n        // ...more hands\n      ],\n      stackSizes: { user: 1000, opponent: 800 },\n    };\n  };\n  \n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async (videoId) => {\n    // Simulate a delay\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  \n    // Return mock first frame URL from the public folder\n    return process.env.PUBLIC_URL + '/test_frame.jpg';\n  };"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC5C;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEE,OAAO,EAAE;EAAkB,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOD,OAAO,IAAK;EACnD;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IACLI,KAAK,EAAE,CACL;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAQ,CAAC,EACxD;MAAEF,MAAM,EAAE,UAAU;MAAEC,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAO;IAC1D;IAAA,CACD;;IACDC,UAAU,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAI;EAC1C,CAAC;AACH,CAAC;;AAEH;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOT,OAAO,IAAK;EAC/C;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAOY,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,iBAAiB;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
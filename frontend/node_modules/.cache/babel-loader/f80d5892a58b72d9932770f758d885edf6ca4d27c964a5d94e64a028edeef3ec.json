{"ast":null,"code":"import _regeneratorRuntime from\"/root/Projects/linecheck/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/root/Projects/linecheck/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/root/Projects/linecheck/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{useParams}from\"react-router-dom\";import{getOcrResults}from\"../utils/mockApiUtils\";// Update with actual API function\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DataDisplay=function DataDisplay(){var _useParams=useParams(),videoId=_useParams.videoId;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),ocrResults=_useState2[0],setOcrResults=_useState2[1];useEffect(function(){fetchOcrResults();},[]);var fetchOcrResults=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var results,formattedResults;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getOcrResults(videoId);case 3:results=_context.sent;console.log(\"Fetched OCR results:\",results);// Log the fetched results\nformattedResults=formatOcrResults(results.ocr_results);console.log(\"Formatted OCR results:\",formattedResults);// Log the formatted results\nsetOcrResults(formattedResults);_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error(\"Error fetching OCR results:\",_context.t0);case 13:case\"end\":return _context.stop();}},_callee,null,[[0,10]]);}));return function fetchOcrResults(){return _ref.apply(this,arguments);};}();var formatOcrResults=function formatOcrResults(ocrResults){// OCR Results are in the following format:\n// {Opponent: Array(35), Stack: Array(35)}\n// within Opponent, each element is in the following format:\n// {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n// It is the same for stack.\n// We want to format the data into the following format:\n// Frame 1, Stack, Opponent\n// Frame 2, Stack, Opponent\n// ...\n// First, we need to combine the Opponent and Stack arrays into a single array\nvar combinedResults=ocrResults.Opponent.map(function(opponentResult,index){var stackResult=ocrResults.Stack[index];return{frameIndex:opponentResult.frame_index,opponentText:opponentResult.ocr_text,stackText:stackResult.ocr_text};}// Next, we need to format the data into the following format:\n// Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n// Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n// ...\n).map(function(combinedResult){return{frameIndex:combinedResult.frameIndex,opponentText:combinedResult.opponentText,opponentStackSize:extractStackSize(combinedResult.opponentText),stackText:combinedResult.stackText,stackStackSize:extractStackSize(combinedResult.stackText),timestamp:calculateTimestamp(combinedResult.frameIndex)};}// Finally, we need to sort the data by frame index\n).sort(function(a,b){return a.frameIndex-b.frameIndex;});return combinedResults;};var extractStackSize=function extractStackSize(ocrText){// Use regex or string manipulation to extract stack size from OCR text\n// Example: \"18.36 BB\" => 18.36\nvar regex=/(\\d+\\.\\d+)\\s+BB/;var match=ocrText.match(regex);return match?match[1]:\"\";};var calculateTimestamp=function calculateTimestamp(frameIndex){// Calculate timestamp based on frame index and frame rate\nvar frameRate=30;// Replace with your video's frame rate\nreturn(frameIndex/frameRate).toFixed(2);};var renderOcrResults=function renderOcrResults(){// Render the formatted OCR results\n// If ocrResults is null, return a loading indicator\nif(!ocrResults){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});}// If ocrResults is an empty array, return a message indicating that no data is available\nif(ocrResults.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"No data available\"});// Otherwise, render the data\n}else{// Render the table headers\n// First, get the keys of the first element in the array\nvar keys=Object.keys(ocrResults[0]);// Next, render the table headers\nvar tableHeaders=keys.map(function(key){return/*#__PURE__*/_jsx(\"th\",{children:key},key);});// Render the table rows\nvar tableRows=ocrResults.map(function(ocrResult){// Render the table cells\nvar tableCells=keys.map(function(key){return/*#__PURE__*/_jsx(\"td\",{children:ocrResult[key]},key);});// Render the table row\nreturn/*#__PURE__*/_jsx(\"tr\",{children:tableCells},ocrResult.frameIndex);});// Render the table\n// Note: You can use a UI library like React Bootstrap to style the table\nreturn/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:tableHeaders})}),/*#__PURE__*/_jsx(\"tbody\",{children:tableRows})]});}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Data Viewer\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Video ID: \",videoId]}),/*#__PURE__*/_jsx(\"p\",{children:\"OCR Results:\"}),renderOcrResults()]});};export default DataDisplay;","map":{"version":3,"names":["React","useEffect","useState","useParams","getOcrResults","jsx","_jsx","jsxs","_jsxs","DataDisplay","_useParams","videoId","_useState","_useState2","_slicedToArray","ocrResults","setOcrResults","fetchOcrResults","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","results","formattedResults","wrap","_callee$","_context","prev","next","sent","console","log","formatOcrResults","ocr_results","t0","error","stop","apply","arguments","combinedResults","Opponent","map","opponentResult","index","stackResult","Stack","frameIndex","frame_index","opponentText","ocr_text","stackText","combinedResult","opponentStackSize","extractStackSize","stackStackSize","timestamp","calculateTimestamp","sort","a","b","ocrText","regex","match","frameRate","toFixed","renderOcrResults","children","length","keys","Object","tableHeaders","key","tableRows","ocrResult","tableCells"],"sources":["/root/Projects/linecheck/frontend/src/components/DataDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getOcrResults } from \"../utils/mockApiUtils\"; // Update with actual API function\n\nconst DataDisplay = () => {\n  const { videoId } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log(\"Fetched OCR results:\", results); // Log the fetched results\n      const formattedResults = formatOcrResults(results.ocr_results);\n      console.log(\"Formatted OCR results:\", formattedResults); // Log the formatted results\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error(\"Error fetching OCR results:\", error);\n    }\n  };\n\n  const formatOcrResults = (ocrResults) => {\n    // OCR Results are in the following format:\n    // {Opponent: Array(35), Stack: Array(35)}\n    // within Opponent, each element is in the following format:\n    // {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n    // It is the same for stack.\n\n    // We want to format the data into the following format:\n    // Frame 1, Stack, Opponent\n    // Frame 2, Stack, Opponent\n    // ...\n\n    // First, we need to combine the Opponent and Stack arrays into a single array\n    const combinedResults = ocrResults.Opponent.map(\n      (opponentResult, index) => {\n        const stackResult = ocrResults.Stack[index];\n        return {\n          frameIndex: opponentResult.frame_index,\n          opponentText: opponentResult.ocr_text,\n          stackText: stackResult.ocr_text,\n        };\n      }\n\n      // Next, we need to format the data into the following format:\n      // Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n      // Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n      // ...\n    )\n      .map(\n        (combinedResult) => {\n          return {\n            frameIndex: combinedResult.frameIndex,\n            opponentText: combinedResult.opponentText,\n            opponentStackSize: extractStackSize(combinedResult.opponentText),\n            stackText: combinedResult.stackText,\n            stackStackSize: extractStackSize(combinedResult.stackText),\n            timestamp: calculateTimestamp(combinedResult.frameIndex),\n          };\n        }\n\n        // Finally, we need to sort the data by frame index\n      )\n      .sort((a, b) => a.frameIndex - b.frameIndex);\n\n    return combinedResults;\n  };\n\n  const extractStackSize = (ocrText) => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : \"\";\n  };\n\n  const calculateTimestamp = (frameIndex) => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n\n  const renderOcrResults = () => {\n    // Render the formatted OCR results\n\n    // If ocrResults is null, return a loading indicator\n    if (!ocrResults) {\n      return <p>Loading...</p>;\n    }\n\n    // If ocrResults is an empty array, return a message indicating that no data is available\n    if (ocrResults.length === 0) {\n      return <p>No data available</p>;\n\n      // Otherwise, render the data\n    } else {\n      // Render the table headers\n\n      // First, get the keys of the first element in the array\n      const keys = Object.keys(ocrResults[0]);\n\n      // Next, render the table headers\n      const tableHeaders = keys.map((key) => {\n        return <th key={key}>{key}</th>;\n      });\n\n      // Render the table rows\n      const tableRows = ocrResults.map((ocrResult) => {\n        // Render the table cells\n        const tableCells = keys.map((key) => {\n          return <td key={key}>{ocrResult[key]}</td>;\n        });\n\n        // Render the table row\n        return <tr key={ocrResult.frameIndex}>{tableCells}</tr>;\n      });\n\n      // Render the table\n      // Note: You can use a UI library like React Bootstrap to style the table\n      return (\n        <table>\n          <thead>\n            <tr>{tableHeaders}</tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </table>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h2>Data Viewer</h2>\n      <p>Video ID: {videoId}</p>\n      <p>OCR Results:</p>\n      {renderOcrResults()}\n    </div>\n  );\n};\n\nexport default DataDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
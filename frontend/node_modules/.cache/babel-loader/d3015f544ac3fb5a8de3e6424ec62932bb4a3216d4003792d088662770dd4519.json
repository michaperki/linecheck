{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/DataDisplay.js\",\n  _s = $RefreshSig$();\n// src/components/DataDisplay.js\n\nimport React, { useState, useEffect } from 'react';\nimport { getAnalysisResults } from '../utils/mockApiUtils'; // Import the mock API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  videoId\n}) => {\n  _s();\n  const [analysisData, setAnalysisData] = useState(null);\n  useEffect(() => {\n    // Fetch analysis results when the component mounts\n    fetchAnalysisResults(videoId);\n  }, [videoId]);\n  const fetchAnalysisResults = async videoId => {\n    try {\n      // Simulate fetching analysis results from the API\n      const response = await getAnalysisResults(videoId);\n\n      // Set the analysis data in state\n      setAnalysisData(response);\n    } catch (error) {\n      console.error('Error fetching analysis results:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Analysis Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), analysisData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(analysisData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading analysis results...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"6mmcqtfupH7pl9HxcZsyvDU3oJg=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","useEffect","getAnalysisResults","jsxDEV","_jsxDEV","DataDisplay","videoId","_s","analysisData","setAnalysisData","fetchAnalysisResults","response","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/DataDisplay.js"],"sourcesContent":["// src/components/DataDisplay.js\n\nimport React, { useState, useEffect } from 'react';\nimport { getAnalysisResults } from '../utils/mockApiUtils'; // Import the mock API function\n\nconst DataDisplay = ({ videoId }) => {\n  const [analysisData, setAnalysisData] = useState(null);\n\n  useEffect(() => {\n    // Fetch analysis results when the component mounts\n    fetchAnalysisResults(videoId);\n  }, [videoId]);\n\n  const fetchAnalysisResults = async (videoId) => {\n    try {\n      // Simulate fetching analysis results from the API\n      const response = await getAnalysisResults(videoId);\n\n      // Set the analysis data in state\n      setAnalysisData(response);\n    } catch (error) {\n      console.error('Error fetching analysis results:', error);\n    }\n  };\n\n  return (\n    <div className=\"data-display\">\n      <h2>Analysis Results</h2>\n      {analysisData ? (\n        <div>\n          {/* Display the analysis data */}\n          <pre>{JSON.stringify(analysisData, null, 2)}</pre>\n        </div>\n      ) : (\n        <p>Loading analysis results...</p>\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,kBAAkB,QAAQ,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACAS,oBAAoB,CAACJ,OAAO,CAAC;EAC/B,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAMI,oBAAoB,GAAG,MAAOJ,OAAO,IAAK;IAC9C,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMT,kBAAkB,CAACI,OAAO,CAAC;;MAElD;MACAG,eAAe,CAACE,QAAQ,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,oBACER,OAAA;IAAKU,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BX,OAAA;MAAAW,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBX,YAAY,gBACXJ,OAAA;MAAAW,QAAA,eAEEX,OAAA;QAAAW,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACb,YAAY,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,gBAENf,OAAA;MAAAW,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAClC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACZ,EAAA,CAjCIF,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
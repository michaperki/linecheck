{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport VideoUploadComponent from \"./components/VideoUploadComponent\";\nimport VideoPreviewComponent from \"./components/VideoPreviewComponent\";\nimport GridSelectionComponent from \"./components/GridSelectionComponent\";\nimport ColorSelectionComponent from \"./components/ColorSelectionComponent\";\nimport SubmitButton from \"./components/SubmitButton\";\nimport ProcessingFeedbackComponent from \"./components/ProcessingFeedbackComponent\";\nimport DataDisplayComponent from \"./components/DataDisplayComponent\";\nimport MultipleSelectionSupport from \"./components/MultipleSelectionSupport\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState(\"red\");\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n  const [processedFramePath, setProcessedFramePath] = useState(null);\n\n  // Fetch processed frame image when videoURL changes\n  useEffect(() => {\n    if (videoURL) {\n      console.log(\"Fetching processed frame image...\");\n      fetchProcessedFrameImage();\n      console.log(\"Done fetching processed frame image.\");\n    }\n  }, [videoURL]);\n\n  // Fetch processed frame image from the backend\n  const fetchProcessedFrameImage = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/${videoURL}`, {\n        method: \"GET\"\n      });\n      if (response.ok) {\n        const processedFrameURL = URL.createObjectURL(await response.blob());\n        setProcessedFramePath(processedFrameURL);\n      } else {\n        console.error(\"Failed to fetch processed frame image.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching processed frame image:\", error);\n    }\n  };\n  const handleVideoUpload = async videoURL => {\n    setVideoURL(videoURL);\n  };\n  const handleCellClick = cell => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter(c => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n  const handleSelectColor = color => {\n    setSelectedColor(color);\n  };\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n    fetch(\"http://localhost:5000/process\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor\n      })\n    }).then(response => response.json()).then(data => {\n      setProcessing(false);\n      setProcessedData(data);\n\n      // Only set processedFramePath if processing is successful\n      if (data.success) {\n        setProcessedFramePath(data.processed_frame_path);\n      }\n    });\n  };\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Processing App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoUploadComponent, {\n      onVideoUpload: handleVideoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoPreviewComponent, {\n      videoURL: videoURL,\n      processedFramePath: processedFramePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kzWEzApByCcG18kWbBcz1S1YyOg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","VideoUploadComponent","VideoPreviewComponent","GridSelectionComponent","ColorSelectionComponent","SubmitButton","ProcessingFeedbackComponent","DataDisplayComponent","MultipleSelectionSupport","jsxDEV","_jsxDEV","App","_s","videoURL","setVideoURL","selectedCells","setSelectedCells","selectedColor","setSelectedColor","processing","setProcessing","processedData","setProcessedData","multipleSelection","setMultipleSelection","processedFramePath","setProcessedFramePath","console","log","fetchProcessedFrameImage","response","fetch","method","ok","processedFrameURL","URL","createObjectURL","blob","error","handleVideoUpload","handleCellClick","cell","includes","filter","c","handleSelectColor","color","handleProcessClick","headers","body","JSON","stringify","then","json","data","success","processed_frame_path","handleToggleMultipleSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onVideoUpload","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport VideoUploadComponent from \"./components/VideoUploadComponent\";\nimport VideoPreviewComponent from \"./components/VideoPreviewComponent\";\nimport GridSelectionComponent from \"./components/GridSelectionComponent\";\nimport ColorSelectionComponent from \"./components/ColorSelectionComponent\";\nimport SubmitButton from \"./components/SubmitButton\";\nimport ProcessingFeedbackComponent from \"./components/ProcessingFeedbackComponent\";\nimport DataDisplayComponent from \"./components/DataDisplayComponent\";\nimport MultipleSelectionSupport from \"./components/MultipleSelectionSupport\";\n\nfunction App() {\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState(\"red\");\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n  const [processedFramePath, setProcessedFramePath] = useState(null);\n\n  // Fetch processed frame image when videoURL changes\n  useEffect(() => {\n    if (videoURL) {\n      console.log(\"Fetching processed frame image...\");\n      fetchProcessedFrameImage();\n      console.log(\"Done fetching processed frame image.\");\n    }\n  }, [videoURL]);\n\n  // Fetch processed frame image from the backend\n  const fetchProcessedFrameImage = async () => {\n    try {\n      const response = await fetch(\n        `http://localhost:5000/${videoURL}`,\n        {\n          method: \"GET\",\n        }\n      );\n\n      if (response.ok) {\n        const processedFrameURL = URL.createObjectURL(await response.blob());\n        setProcessedFramePath(processedFrameURL);\n      } else {\n        console.error(\"Failed to fetch processed frame image.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching processed frame image:\", error);\n    }\n  };\n\n  const handleVideoUpload = async (videoURL) => {\n    setVideoURL(videoURL);\n  };\n\n  const handleCellClick = (cell) => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter((c) => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n\n  const handleSelectColor = (color) => {\n    setSelectedColor(color);\n  };\n\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n\n    fetch(\"http://localhost:5000/process\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setProcessing(false);\n        setProcessedData(data);\n\n        // Only set processedFramePath if processing is successful\n        if (data.success) {\n          setProcessedFramePath(data.processed_frame_path);\n        }\n      });\n  };\n\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Processing App</h1>\n\n      {/* Video upload component */}\n      <VideoUploadComponent onVideoUpload={handleVideoUpload} />\n\n      {/* Video preview component */}\n      <VideoPreviewComponent\n        videoURL={videoURL}\n        processedFramePath={processedFramePath}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,oBAAoB,MAAM,mCAAmC;AACpE,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,OAAOC,sBAAsB,MAAM,qCAAqC;AACxE,OAAOC,uBAAuB,MAAM,sCAAsC;AAC1E,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,2BAA2B,MAAM,0CAA0C;AAClF,OAAOC,oBAAoB,MAAM,mCAAmC;AACpE,OAAOC,wBAAwB,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACwB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC0B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;;EAElE;EACAC,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ,EAAE;MACZc,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDC,wBAAwB,CAAC,CAAC;MAC1BF,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACrD;EACF,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMgB,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,yBAAwBlB,QAAS,EAAC,EACnC;QACEmB,MAAM,EAAE;MACV,CACF,CAAC;MAED,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,iBAAiB,GAAGC,GAAG,CAACC,eAAe,CAAC,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;QACpEX,qBAAqB,CAACQ,iBAAiB,CAAC;MAC1C,CAAC,MAAM;QACLP,OAAO,CAACW,KAAK,CAAC,wCAAwC,CAAC;MACzD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAO1B,QAAQ,IAAK;IAC5CC,WAAW,CAACD,QAAQ,CAAC;EACvB,CAAC;EAED,MAAM2B,eAAe,GAAIC,IAAI,IAAK;IAChC,IAAIlB,iBAAiB,EAAE;MACrB,IAAIR,aAAa,CAAC2B,QAAQ,CAACD,IAAI,CAAC,EAAE;QAChCzB,gBAAgB,CAACD,aAAa,CAAC4B,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKH,IAAI,CAAC,CAAC;MAC3D,CAAC,MAAM;QACLzB,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE0B,IAAI,CAAC,CAAC;MAC5C;IACF,CAAC,MAAM;MACLzB,gBAAgB,CAAC,CAACyB,IAAI,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMI,iBAAiB,GAAIC,KAAK,IAAK;IACnC5B,gBAAgB,CAAC4B,KAAK,CAAC;EACzB,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B3B,aAAa,CAAC,IAAI,CAAC;IACnBE,gBAAgB,CAAC,IAAI,CAAC;IAEtBS,KAAK,CAAC,+BAA+B,EAAE;MACrCC,MAAM,EAAE,MAAM;MACdgB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBtC,QAAQ;QACRE,aAAa;QACbE;MACF,CAAC;IACH,CAAC,CAAC,CACCmC,IAAI,CAAEtB,QAAQ,IAAKA,QAAQ,CAACuB,IAAI,CAAC,CAAC,CAAC,CACnCD,IAAI,CAAEE,IAAI,IAAK;MACdlC,aAAa,CAAC,KAAK,CAAC;MACpBE,gBAAgB,CAACgC,IAAI,CAAC;;MAEtB;MACA,IAAIA,IAAI,CAACC,OAAO,EAAE;QAChB7B,qBAAqB,CAAC4B,IAAI,CAACE,oBAAoB,CAAC;MAClD;IACF,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,6BAA6B,GAAGA,CAAA,KAAM;IAC1CjC,oBAAoB,CAAC,CAACD,iBAAiB,CAAC;EAC1C,CAAC;EAED,oBACEb,OAAA;IAAKgD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjD,OAAA;MAAAiD,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG7BrD,OAAA,CAACT,oBAAoB;MAAC+D,aAAa,EAAEzB;IAAkB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG1DrD,OAAA,CAACR,qBAAqB;MACpBW,QAAQ,EAAEA,QAAS;MACnBY,kBAAkB,EAAEA;IAAmB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnD,EAAA,CAxGQD,GAAG;AAAAsD,EAAA,GAAHtD,GAAG;AA0GZ,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// utils/mockApiUtils.js\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  return Math.random().toString(36).substring(2, 15);\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async videoFile => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock response with a generated video_id\n  const videoId = generateVideoId(); // You can create a function to generate unique video ids\n  return {\n    success: true,\n    videoId\n  };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Translate the first letter of the video id to a number, either 1, 2, or 3\n  const frameNumber = parseInt(videoId[0]) % 3 + 1;\n\n  // Return the mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + `/test_frame_${frameNumber}.jpg`;\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async selectedQuadrants => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["generateVideoId","Math","random","toString","substring","uploadVideo","videoFile","Promise","resolve","setTimeout","videoId","success","getAnalysisResults","mockResults","analysisType","getFirstFrameUrl","frameNumber","parseInt","process","env","PUBLIC_URL","sendGridSelection","selectedQuadrants"],"sources":["/root/Projects/linecheck/frontend/src/utils/mockApiUtils.js"],"sourcesContent":["// utils/mockApiUtils.js\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  return Math.random().toString(36).substring(2, 15);\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async (videoFile) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock response with a generated video_id\n  const videoId = generateVideoId(); // You can create a function to generate unique video ids\n  return { success: true, videoId };\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId,\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\n// Mock function to simulate getting the URL of the first frame\nexport const getFirstFrameUrl = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Translate the first letter of the video id to a number, either 1, 2, or 3\n  const frameNumber = parseInt(videoId[0]) % 3 + 1;\n\n  \n  // Return the mock first frame URL from the public folder\n  return process.env.PUBLIC_URL + `/test_frame_${frameNumber}.jpg`;\n};\n\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async (selectedQuadrants) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return { success: true };\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAME,OAAO,GAAGV,eAAe,CAAC,CAAC,CAAC,CAAC;EACnC,OAAO;IAAEW,OAAO,EAAE,IAAI;IAAED;EAAQ,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAOF,OAAO,IAAK;EACnD;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMK,WAAW,GAAG;IAClBC,YAAY,EAAE,uBAAuB;IACrCJ,OAAO,EAAEA;IACT;EACF,CAAC;;EAED,OAAOG,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOL,OAAO,IAAK;EACjD;EACA,MAAM,IAAIH,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMQ,WAAW,GAAGC,QAAQ,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;;EAGhD;EACA,OAAOQ,OAAO,CAACC,GAAG,CAACC,UAAU,GAAI,eAAcJ,WAAY,MAAK;AAClE,CAAC;;AAGD;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAOC,iBAAiB,IAAK;EAC5D;EACA,MAAM,IAAIf,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEG,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
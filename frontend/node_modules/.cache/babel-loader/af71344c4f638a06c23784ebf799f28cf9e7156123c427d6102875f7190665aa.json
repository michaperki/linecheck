{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport VideoUploadComponent from './components/VideoUploadComponent';\nimport VideoPreviewComponent from './components/VideoPreviewComponent';\nimport GridSelectionComponent from './components/GridSelectionComponent';\nimport ColorSelectionComponent from './components/ColorSelectionComponent';\nimport SubmitButton from './components/SubmitButton';\nimport ProcessingFeedbackComponent from './components/ProcessingFeedbackComponent';\nimport DataDisplayComponent from './components/DataDisplayComponent';\nimport MultipleSelectionSupport from './components/MultipleSelectionSupport';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n\n  // Define your component logic and event handlers here\n\n  const handleVideoUpload = videoURL => {\n    setVideoURL(videoURL);\n  };\n  const handleCellClick = cell => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter(c => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n  const handleSelectColor = color => {\n    setSelectedColor(color);\n  };\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n    fetch('http://localhost:5000/process', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor\n      })\n    }).then(response => response.json()).then(data => {\n      setProcessing(false);\n      setProcessedData(data);\n    });\n  };\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Processing App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoUploadComponent, {\n      onVideoUpload: handleVideoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), videoURL && /*#__PURE__*/_jsxDEV(VideoPreviewComponent, {\n      videoURL: videoURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }, this), videoURL && /*#__PURE__*/_jsxDEV(GridSelectionComponent, {\n      onCellClick: handleCellClick,\n      multipleSelection: multipleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ColorSelectionComponent, {\n      selectedColor: selectedColor,\n      onSelectColor: handleSelectColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), videoURL && selectedCells.length > 0 && /*#__PURE__*/_jsxDEV(SubmitButton, {\n      onClick: handleProcessClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), processing && /*#__PURE__*/_jsxDEV(ProcessingFeedbackComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 22\n    }, this), processedData && /*#__PURE__*/_jsxDEV(DataDisplayComponent, {\n      data: processedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(MultipleSelectionSupport, {\n      onToggleMultipleSelection: handleToggleMultipleSelection,\n      multipleSelection: multipleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N3Yfi1w+6lBkrRWJ1Qed9qhHM0A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","VideoUploadComponent","VideoPreviewComponent","GridSelectionComponent","ColorSelectionComponent","SubmitButton","ProcessingFeedbackComponent","DataDisplayComponent","MultipleSelectionSupport","jsxDEV","_jsxDEV","App","_s","videoURL","setVideoURL","selectedCells","setSelectedCells","selectedColor","setSelectedColor","processing","setProcessing","processedData","setProcessedData","multipleSelection","setMultipleSelection","handleVideoUpload","handleCellClick","cell","includes","filter","c","handleSelectColor","color","handleProcessClick","fetch","method","headers","body","JSON","stringify","then","response","json","data","handleToggleMultipleSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onVideoUpload","onCellClick","onSelectColor","length","onClick","onToggleMultipleSelection","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport VideoUploadComponent from './components/VideoUploadComponent';\nimport VideoPreviewComponent from './components/VideoPreviewComponent';\nimport GridSelectionComponent from './components/GridSelectionComponent';\nimport ColorSelectionComponent from './components/ColorSelectionComponent';\nimport SubmitButton from './components/SubmitButton';\nimport ProcessingFeedbackComponent from './components/ProcessingFeedbackComponent';\nimport DataDisplayComponent from './components/DataDisplayComponent';\nimport MultipleSelectionSupport from './components/MultipleSelectionSupport';\n\nfunction App() {\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n\n  // Define your component logic and event handlers here\n\n  const handleVideoUpload = (videoURL) => {\n    setVideoURL(videoURL);\n  };\n\n  const handleCellClick = (cell) => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter((c) => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n\n  const handleSelectColor = (color) => {\n    setSelectedColor(color);\n  };\n\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n\n    fetch('http://localhost:5000/process', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setProcessing(false);\n        setProcessedData(data);\n      });\n  };\n\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Processing App</h1>\n\n      {/* Video upload component */}\n      <VideoUploadComponent onVideoUpload={handleVideoUpload} />\n\n      {/* Video preview component */}\n      {videoURL && <VideoPreviewComponent videoURL={videoURL} />}\n\n      {/* Grid selection component */}\n      {videoURL && (\n        <GridSelectionComponent\n          onCellClick={handleCellClick}\n          multipleSelection={multipleSelection}\n        />\n      )}\n\n      {/* Color selection component */}\n      <ColorSelectionComponent\n        selectedColor={selectedColor}\n        onSelectColor={handleSelectColor}\n      />\n\n      {/* Submit button */}\n      {videoURL && selectedCells.length > 0 && (\n        <SubmitButton onClick={handleProcessClick} />\n      )}\n\n      {/* Processing feedback component */}\n      {processing && <ProcessingFeedbackComponent />}\n\n      {/* Processed data display component */}\n      {processedData && <DataDisplayComponent data={processedData} />}\n      \n      {/* Multiple selection support */}\n      <MultipleSelectionSupport\n        onToggleMultipleSelection={handleToggleMultipleSelection}\n        multipleSelection={multipleSelection}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
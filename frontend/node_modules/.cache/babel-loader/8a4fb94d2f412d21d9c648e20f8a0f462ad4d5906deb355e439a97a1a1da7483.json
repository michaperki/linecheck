{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/ImageDisplay.js\";\n// ImageDisplay.js\nimport React from 'react';\nimport './ImageDisplay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageDisplay = ({\n  firstFrameUrl,\n  selectedSquares,\n  onSquareClick\n}) => {\n  const numRows = 30;\n  const numCols = 30;\n  const squareSize = 100 / numRows; // Assuming each square is 1% of the image size\n\n  const handleSquareClick = (row, col) => {\n    const squareIndex = row * numCols + col;\n    onSquareClick(squareIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: Array.from({\n        length: numRows\n      }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: Array.from({\n          length: numCols\n        }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-square ${selectedSquares.includes(rowIndex * numCols + colIndex) ? 'selected' : ''}`,\n          style: {\n            width: `${squareSize}%`,\n            paddingTop: `${squareSize}%`\n          },\n          onClick: () => handleSquareClick(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: firstFrameUrl,\n      alt: \"First Frame\",\n      className: \"img\",\n      style: {\n        width: `${squareSize * numCols}%`,\n        // Set the width based on grid size\n        height: `${squareSize * numRows}vh` // Set the height using viewport height units\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = ImageDisplay;\nexport default ImageDisplay;\nvar _c;\n$RefreshReg$(_c, \"ImageDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ImageDisplay","firstFrameUrl","selectedSquares","onSquareClick","numRows","numCols","squareSize","handleSquareClick","row","col","squareIndex","className","children","Array","from","length","map","_","rowIndex","colIndex","includes","style","width","paddingTop","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","height","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/ImageDisplay.js"],"sourcesContent":["// ImageDisplay.js\nimport React from 'react';\nimport './ImageDisplay.css';\n\nconst ImageDisplay = ({ firstFrameUrl, selectedSquares, onSquareClick }) => {\n  const numRows = 30;\n  const numCols = 30;\n  const squareSize = 100 / numRows; // Assuming each square is 1% of the image size\n\n  const handleSquareClick = (row, col) => {\n    const squareIndex = row * numCols + col;\n    onSquareClick(squareIndex);\n  };\n\n  return (\n    <div className=\"image-display\">\n      <div className=\"grid-container\">\n        {Array.from({ length: numRows }).map((_, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {Array.from({ length: numCols }).map((_, colIndex) => (\n              <div\n                key={colIndex}\n                className={`grid-square ${selectedSquares.includes(\n                  rowIndex * numCols + colIndex\n                ) ? 'selected' : ''}`}\n                style={{\n                  width: `${squareSize}%`,\n                  paddingTop: `${squareSize}%`,\n                }}\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <img\n        src={firstFrameUrl}\n        alt=\"First Frame\"\n        className=\"img\"\n        style={{\n          width: `${squareSize * numCols}%`, // Set the width based on grid size\n          height: `${squareSize * numRows}vh`, // Set the height using viewport height units\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ImageDisplay;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,aAAa;EAAEC,eAAe;EAAEC;AAAc,CAAC,KAAK;EAC1E,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,UAAU,GAAG,GAAG,GAAGF,OAAO,CAAC,CAAC;;EAElC,MAAMG,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACtC,MAAMC,WAAW,GAAGF,GAAG,GAAGH,OAAO,GAAGI,GAAG;IACvCN,aAAa,CAACO,WAAW,CAAC;EAC5B,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5Bb,OAAA;MAAKY,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAEX;MAAQ,CAAC,CAAC,CAACY,GAAG,CAAC,CAACC,CAAC,EAAEC,QAAQ,kBAC/CnB,OAAA;QAAoBY,SAAS,EAAC,UAAU;QAAAC,QAAA,EACrCC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAEV;QAAQ,CAAC,CAAC,CAACW,GAAG,CAAC,CAACC,CAAC,EAAEE,QAAQ,kBAC/CpB,OAAA;UAEEY,SAAS,EAAG,eAAcT,eAAe,CAACkB,QAAQ,CAChDF,QAAQ,GAAGb,OAAO,GAAGc,QACvB,CAAC,GAAG,UAAU,GAAG,EAAG,EAAE;UACtBE,KAAK,EAAE;YACLC,KAAK,EAAG,GAAEhB,UAAW,GAAE;YACvBiB,UAAU,EAAG,GAAEjB,UAAW;UAC5B,CAAE;UACFkB,OAAO,EAAEA,CAAA,KAAMjB,iBAAiB,CAACW,QAAQ,EAAEC,QAAQ;QAAE,GARhDA,QAAQ;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASd,CACF;MAAC,GAbMV,QAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MACE8B,GAAG,EAAE5B,aAAc;MACnB6B,GAAG,EAAC,aAAa;MACjBnB,SAAS,EAAC,KAAK;MACfU,KAAK,EAAE;QACLC,KAAK,EAAG,GAAEhB,UAAU,GAAGD,OAAQ,GAAE;QAAE;QACnC0B,MAAM,EAAG,GAAEzB,UAAU,GAAGF,OAAQ,IAAG,CAAE;MACvC;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACI,EAAA,GA1CIhC,YAAY;AA4ClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getOcrResults } from '../utils/mockApiUtils'; // Update with actual API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = () => {\n  _s();\n  const {\n    videoId\n  } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log('Fetched OCR results:', results);\n      const formattedResults = formatOcrResults(results);\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error('Error fetching OCR results:', error);\n    }\n  };\n  const formatOcrResults = ocrResults => {\n    return ocrResults.Opponent.map(result => {\n      const stackSize = extractStackSize(result.ocr_text);\n      const timestamp = calculateTimestamp(result.frame_index);\n      return {\n        timestamp,\n        stackSize\n      };\n    });\n  };\n  const extractStackSize = ocrText => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : '';\n  };\n  const calculateTimestamp = frameIndex => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"OCR Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), ocrResults ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(ocrResults, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading OCR results...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"D9EgdiF1Nu/15seJW2SGHGGc7Mc=\", false, function () {\n  return [useParams];\n});\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getOcrResults","jsxDEV","_jsxDEV","DataDisplay","_s","videoId","ocrResults","setOcrResults","fetchOcrResults","results","console","log","formattedResults","formatOcrResults","error","Opponent","map","result","stackSize","extractStackSize","ocr_text","timestamp","calculateTimestamp","frame_index","ocrText","regex","match","frameIndex","frameRate","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/DataDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getOcrResults } from '../utils/mockApiUtils'; // Update with actual API function\n\nconst DataDisplay = () => {\n  const { videoId } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log('Fetched OCR results:', results);\n      const formattedResults = formatOcrResults(results);\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error('Error fetching OCR results:', error);\n    }\n  };\n\n  const formatOcrResults = (ocrResults) => {\n    return ocrResults.Opponent.map((result) => {\n      const stackSize = extractStackSize(result.ocr_text);\n      const timestamp = calculateTimestamp(result.frame_index);\n\n      return {\n        timestamp,\n        stackSize,\n      };\n    });\n  };\n\n  const extractStackSize = (ocrText) => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : '';\n  };\n\n  const calculateTimestamp = (frameIndex) => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n\n  return (\n    <div>\n      <h2>Data Viewer</h2>\n      <h3>OCR Results</h3>\n      {ocrResults ? (\n        <pre>{JSON.stringify(ocrResults, null, 2)}</pre>\n      ) : (\n        <p>Loading OCR results...</p>\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAQ,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC/B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAElDD,SAAS,CAAC,MAAM;IACdW,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMT,aAAa,CAACK,OAAO,CAAC;MAC5CK,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,OAAO,CAAC;MAC5C,MAAMG,gBAAgB,GAAGC,gBAAgB,CAACJ,OAAO,CAAC;MAClDF,aAAa,CAACK,gBAAgB,CAAC;IACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMD,gBAAgB,GAAIP,UAAU,IAAK;IACvC,OAAOA,UAAU,CAACS,QAAQ,CAACC,GAAG,CAAEC,MAAM,IAAK;MACzC,MAAMC,SAAS,GAAGC,gBAAgB,CAACF,MAAM,CAACG,QAAQ,CAAC;MACnD,MAAMC,SAAS,GAAGC,kBAAkB,CAACL,MAAM,CAACM,WAAW,CAAC;MAExD,OAAO;QACLF,SAAS;QACTH;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAIK,OAAO,IAAK;IACpC;IACA;IACA,MAAMC,KAAK,GAAG,iBAAiB;IAC/B,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACD,KAAK,CAAC;IAClC,OAAOC,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9B,CAAC;EAED,MAAMJ,kBAAkB,GAAIK,UAAU,IAAK;IACzC;IACA,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;IACtB,OAAO,CAACD,UAAU,GAAGC,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,oBACE3B,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBhC,OAAA;MAAA4B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnB5B,UAAU,gBACTJ,OAAA;MAAA4B,QAAA,EAAMK,IAAI,CAACC,SAAS,CAAC9B,UAAU,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAEhDhC,OAAA;MAAA4B,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC7B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAxDID,WAAW;EAAA,QACKJ,SAAS;AAAA;AAAAsC,EAAA,GADzBlC,WAAW;AA0DjB,eAAeA,WAAW;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport VideoUploadComponent from './components/VideoUploadComponent';\nimport VideoPreviewComponent from './components/VideoPreviewComponent';\nimport GridSelectionComponent from './components/GridSelectionComponent';\nimport ColorSelectionComponent from './components/ColorSelectionComponent';\nimport SubmitButton from './components/SubmitButton';\nimport ProcessingFeedbackComponent from './components/ProcessingFeedbackComponent';\nimport DataDisplayComponent from './components/DataDisplayComponent';\nimport MultipleSelectionSupport from './components/MultipleSelectionSupport';\nimport FormData from 'form-data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n  const [processedFramePath, setProcessedFramePath] = useState(null);\n\n  // Define your component logic and event handlers here\n\n  const handleVideoUpload = async videoURL => {\n    setVideoURL(videoURL);\n    try {\n      const response = await fetch('http://localhost:5000/process_video', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setProcessedFramePath(data.processed_frame_path); // Set the processed frame path\n      } else {\n        console.error('Video upload failed.');\n      }\n    } catch (error) {\n      console.error('Error uploading video:', error);\n    }\n  };\n  const handleCellClick = cell => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter(c => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n  const handleSelectColor = color => {\n    setSelectedColor(color);\n  };\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n    fetch('http://localhost:5000/process', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor\n      })\n    }).then(response => response.json()).then(data => {\n      setProcessing(false);\n      setProcessedData(data);\n\n      // Only set processedFramePath if processing is successful\n      if (data.success) {\n        setProcessedFramePath(data.processed_frame_path);\n      }\n    });\n  };\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Processing App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoUploadComponent, {\n      onVideoUpload: handleVideoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoPreviewComponent, {\n      processedFramePath: processedFramePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), videoURL && /*#__PURE__*/_jsxDEV(GridSelectionComponent, {\n      onCellClick: handleCellClick,\n      multipleSelection: multipleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ColorSelectionComponent, {\n      selectedColor: selectedColor,\n      onSelectColor: handleSelectColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), videoURL && selectedCells.length > 0 && /*#__PURE__*/_jsxDEV(SubmitButton, {\n      onClick: handleProcessClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), processing && /*#__PURE__*/_jsxDEV(ProcessingFeedbackComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 22\n    }, this), processedData && /*#__PURE__*/_jsxDEV(DataDisplayComponent, {\n      data: processedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(MultipleSelectionSupport, {\n      onToggleMultipleSelection: handleToggleMultipleSelection,\n      multipleSelection: multipleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vF3dCqxrJyUX8DM6hzVcYe1qGus=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","VideoUploadComponent","VideoPreviewComponent","GridSelectionComponent","ColorSelectionComponent","SubmitButton","ProcessingFeedbackComponent","DataDisplayComponent","MultipleSelectionSupport","FormData","jsxDEV","_jsxDEV","App","_s","videoURL","setVideoURL","selectedCells","setSelectedCells","selectedColor","setSelectedColor","processing","setProcessing","processedData","setProcessedData","multipleSelection","setMultipleSelection","processedFramePath","setProcessedFramePath","handleVideoUpload","response","fetch","method","body","formData","ok","data","json","processed_frame_path","console","error","handleCellClick","cell","includes","filter","c","handleSelectColor","color","handleProcessClick","headers","JSON","stringify","then","success","handleToggleMultipleSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onVideoUpload","onCellClick","onSelectColor","length","onClick","onToggleMultipleSelection","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport VideoUploadComponent from './components/VideoUploadComponent';\nimport VideoPreviewComponent from './components/VideoPreviewComponent';\nimport GridSelectionComponent from './components/GridSelectionComponent';\nimport ColorSelectionComponent from './components/ColorSelectionComponent';\nimport SubmitButton from './components/SubmitButton';\nimport ProcessingFeedbackComponent from './components/ProcessingFeedbackComponent';\nimport DataDisplayComponent from './components/DataDisplayComponent';\nimport MultipleSelectionSupport from './components/MultipleSelectionSupport';\nimport FormData from 'form-data';\n\nfunction App() {\n  const [videoURL, setVideoURL] = useState(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [selectedColor, setSelectedColor] = useState('red');\n  const [processing, setProcessing] = useState(false);\n  const [processedData, setProcessedData] = useState(null);\n  const [multipleSelection, setMultipleSelection] = useState(false);\n  const [processedFramePath, setProcessedFramePath] = useState(null);\n\n  // Define your component logic and event handlers here\n\n  const handleVideoUpload = async (videoURL) => {\n    setVideoURL(videoURL);\n  \n    try {\n      const response = await fetch('http://localhost:5000/process_video', {\n        method: 'POST',\n        body: formData,\n      });\n  \n      if (response.ok) {\n        const data = await response.json();\n        setProcessedFramePath(data.processed_frame_path); // Set the processed frame path\n      } else {\n        console.error('Video upload failed.');\n      }\n    } catch (error) {\n      console.error('Error uploading video:', error);\n    }\n  };\n  \n  const handleCellClick = (cell) => {\n    if (multipleSelection) {\n      if (selectedCells.includes(cell)) {\n        setSelectedCells(selectedCells.filter((c) => c !== cell));\n      } else {\n        setSelectedCells([...selectedCells, cell]);\n      }\n    } else {\n      setSelectedCells([cell]);\n    }\n  };\n\n  const handleSelectColor = (color) => {\n    setSelectedColor(color);\n  };\n\n  const handleProcessClick = () => {\n    setProcessing(true);\n    setProcessedData(null);\n  \n    fetch('http://localhost:5000/process', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        videoURL,\n        selectedCells,\n        selectedColor,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setProcessing(false);\n        setProcessedData(data);\n  \n        // Only set processedFramePath if processing is successful\n        if (data.success) {\n          setProcessedFramePath(data.processed_frame_path);\n        }\n      });\n  };\n\n  const handleToggleMultipleSelection = () => {\n    setMultipleSelection(!multipleSelection);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Processing App</h1>\n\n      {/* Video upload component */}\n      <VideoUploadComponent onVideoUpload={handleVideoUpload} />\n\n      {/* Video preview component */}\n      <VideoPreviewComponent processedFramePath={processedFramePath} />\n\n      {/* Grid selection component */}\n      {videoURL && (\n        <GridSelectionComponent\n          onCellClick={handleCellClick}\n          multipleSelection={multipleSelection}\n        />\n      )}\n\n      {/* Color selection component */}\n      <ColorSelectionComponent\n        selectedColor={selectedColor}\n        onSelectColor={handleSelectColor}\n      />\n\n      {/* Submit button */}\n      {videoURL && selectedCells.length > 0 && (\n        <SubmitButton onClick={handleProcessClick} />\n      )}\n\n      {/* Processing feedback component */}\n      {processing && <ProcessingFeedbackComponent />}\n\n      {/* Processed data display component */}\n      {processedData && <DataDisplayComponent data={processedData} />}\n      \n      {/* Multiple selection support */}\n      <MultipleSelectionSupport\n        onToggleMultipleSelection={handleToggleMultipleSelection}\n        multipleSelection={multipleSelection}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
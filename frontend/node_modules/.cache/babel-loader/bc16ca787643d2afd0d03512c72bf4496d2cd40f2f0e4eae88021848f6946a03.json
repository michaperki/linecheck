{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getOcrResults } from '../utils/mockApiUtils'; // Update with actual API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = () => {\n  _s();\n  const {\n    videoId\n  } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log('Fetched OCR results:', results); // Log the fetched results\n      const formattedResults = formatOcrResults(results.ocr_results);\n      console.log('Formatted OCR results:', formattedResults); // Log the formatted results\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error('Error fetching OCR results:', error);\n    }\n  };\n  const formatOcrResults = ocrResults => {\n    // OCR Results are in the following format:\n    // {Opponent: Array(35), Stack: Array(35)}\n    // within Opponent, each element is in the following format:\n    // {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n    // It is the same for stack.\n\n    // We want to format the data into the following format:\n    // Frame 1, Stack, Opponent\n    // Frame 2, Stack, Opponent\n    // ...\n\n    // First, we need to combine the Opponent and Stack arrays into a single array\n    const combinedResults = ocrResults.Opponent.map((opponentResult, index) => {\n      const stackResult = ocrResults.Stack[index];\n      return {\n        frameIndex: opponentResult.frame_index,\n        opponentText: opponentResult.ocr_text,\n        stackText: stackResult.ocr_text\n      };\n    }\n\n    // Next, we need to format the data into the following format:\n    // Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // ...\n    ).map(combinedResult => {\n      return {\n        frameIndex: combinedResult.frameIndex,\n        opponentText: combinedResult.opponentText,\n        opponentStackSize: extractStackSize(combinedResult.opponentText),\n        stackText: combinedResult.stackText,\n        stackStackSize: extractStackSize(combinedResult.stackText),\n        timestamp: calculateTimestamp(combinedResult.frameIndex)\n      };\n    }\n\n    // Finally, we need to sort the data by frame index\n    ).sort((a, b) => a.frameIndex - b.frameIndex);\n    return combinedResults;\n  };\n  const extractStackSize = ocrText => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : '';\n  };\n  const calculateTimestamp = frameIndex => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Video ID: \", videoId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"OCR Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(ocrResults, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"D9EgdiF1Nu/15seJW2SGHGGc7Mc=\", false, function () {\n  return [useParams];\n});\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getOcrResults","jsxDEV","_jsxDEV","DataDisplay","_s","videoId","ocrResults","setOcrResults","fetchOcrResults","results","console","log","formattedResults","formatOcrResults","ocr_results","error","combinedResults","Opponent","map","opponentResult","index","stackResult","Stack","frameIndex","frame_index","opponentText","ocr_text","stackText","combinedResult","opponentStackSize","extractStackSize","stackStackSize","timestamp","calculateTimestamp","sort","a","b","ocrText","regex","match","frameRate","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/DataDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getOcrResults } from '../utils/mockApiUtils'; // Update with actual API function\n\nconst DataDisplay = () => {\n  const { videoId } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log('Fetched OCR results:', results); // Log the fetched results\n      const formattedResults = formatOcrResults(results.ocr_results);\n      console.log('Formatted OCR results:', formattedResults); // Log the formatted results\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error('Error fetching OCR results:', error);\n    }\n  };\n\n  const formatOcrResults = (ocrResults) => {\n    // OCR Results are in the following format:\n    // {Opponent: Array(35), Stack: Array(35)}\n    // within Opponent, each element is in the following format:\n    // {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n    // It is the same for stack.\n\n    // We want to format the data into the following format:\n    // Frame 1, Stack, Opponent\n    // Frame 2, Stack, Opponent\n    // ...\n\n    // First, we need to combine the Opponent and Stack arrays into a single array\n    const combinedResults = ocrResults.Opponent.map((opponentResult, index) => {\n      const stackResult = ocrResults.Stack[index];\n      return {\n        frameIndex: opponentResult.frame_index,\n        opponentText: opponentResult.ocr_text,\n        stackText: stackResult.ocr_text,\n      };\n    }\n\n    // Next, we need to format the data into the following format:\n    // Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // ...\n    ).map((combinedResult) => {\n      return {\n        frameIndex: combinedResult.frameIndex,\n        opponentText: combinedResult.opponentText,\n        opponentStackSize: extractStackSize(combinedResult.opponentText),\n        stackText: combinedResult.stackText,\n        stackStackSize: extractStackSize(combinedResult.stackText),\n        timestamp: calculateTimestamp(combinedResult.frameIndex),\n      };\n    }\n\n    // Finally, we need to sort the data by frame index\n    ).sort((a, b) => a.frameIndex - b.frameIndex);\n\n    return combinedResults;\n  };\n\n  const extractStackSize = (ocrText) => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : '';\n  };\n\n  const calculateTimestamp = (frameIndex) => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n\n  return (\n    <div>\n      <h2>Data Viewer</h2>\n      <p>Video ID: {videoId}</p>\n      <p>OCR Results:</p>\n      <pre>{JSON.stringify(ocrResults, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport default DataDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
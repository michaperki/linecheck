{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport UploadPage from \"./pages/UploadPage\";\nimport AnalysisPage from \"./pages/AnalysisPage\";\nimport DataDisplay from \"./components/DataDisplay\";\nimport Header from \"./components/Header\";\nimport { getFirstFrameUrl, generateVideoId } from \"./utils/mockApiUtils\"; // Import the updated mock API function and generateVideoId\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [firstFrameUrl, setFirstFrameUrl] = useState(null);\n  const [videoId, setVideoId] = useState(0); // Store the generated video ID\n\n  useEffect(() => {\n    // Simulate generating the video ID\n    const generatedVideoId = generateVideoId();\n    setVideoId(generatedVideoId);\n\n    // Simulate getting the URL of the first frame\n    getFirstFrameUrl(generatedVideoId).then(url => {\n      setFirstFrameUrl(url);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/upload\",\n          element: /*#__PURE__*/_jsxDEV(UploadPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analysis\",\n          element: /*#__PURE__*/_jsxDEV(AnalysisPage, {\n            firstFrameUrl: firstFrameUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/data/:videoId\",\n          element: /*#__PURE__*/_jsxDEV(DataDisplay, {\n            videoId: videoId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 22\n          }, this) // Pass the generated video ID to DataDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"A47KDdZALzFrENvLQqAwH6HDOKg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","HomePage","UploadPage","AnalysisPage","DataDisplay","Header","getFirstFrameUrl","generateVideoId","jsxDEV","_jsxDEV","App","_s","firstFrameUrl","setFirstFrameUrl","videoId","setVideoId","generatedVideoId","then","url","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport UploadPage from \"./pages/UploadPage\";\nimport AnalysisPage from \"./pages/AnalysisPage\";\nimport DataDisplay from \"./components/DataDisplay\";\nimport Header from \"./components/Header\";\nimport { getFirstFrameUrl, generateVideoId } from \"./utils/mockApiUtils\"; // Import the updated mock API function and generateVideoId\n\nfunction App() {\n  const [firstFrameUrl, setFirstFrameUrl] = useState(null);\n  const [videoId, setVideoId] = useState(0); // Store the generated video ID\n\n  useEffect(() => {\n    // Simulate generating the video ID\n    const generatedVideoId = generateVideoId();\n    setVideoId(generatedVideoId);\n\n    // Simulate getting the URL of the first frame\n    getFirstFrameUrl(generatedVideoId).then((url) => {\n      setFirstFrameUrl(url);\n    });\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/upload\" element={<UploadPage />} />\n          <Route\n            path=\"/analysis\"\n            element={<AnalysisPage firstFrameUrl={firstFrameUrl} />}\n          />\n          <Route\n            path=\"/data/:videoId\"\n            element={<DataDisplay videoId={videoId} />} // Pass the generated video ID to DataDisplay\n          />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/root/Projects/linecheck/frontend/src/components/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getOcrResults } from \"../utils/mockApiUtils\"; // Update with actual API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = () => {\n  _s();\n  const {\n    videoId\n  } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log(\"Fetched OCR results:\", results); // Log the fetched results\n      const formattedResults = formatOcrResults(results.ocr_results);\n      console.log(\"Formatted OCR results:\", formattedResults); // Log the formatted results\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error(\"Error fetching OCR results:\", error);\n    }\n  };\n  const formatOcrResults = ocrResults => {\n    // OCR Results are in the following format:\n    // {Opponent: Array(35), Stack: Array(35)}\n    // within Opponent, each element is in the following format:\n    // {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n    // It is the same for stack.\n\n    // We want to format the data into the following format:\n    // Frame 1, Stack, Opponent\n    // Frame 2, Stack, Opponent\n    // ...\n\n    // First, we need to combine the Opponent, Stack, and HoleCard arrays into a single array\n    const combinedResults = ocrResults.Opponent.map((opponentResult, index) => {\n      const stackResult = ocrResults.Stack[index];\n      const holeCardResult = ocrResults.HoleCard[index];\n      return {\n        frameIndex: opponentResult.frame_index,\n        opponentText: opponentResult.ocr_text,\n        stackText: stackResult.ocr_text,\n        holeCardText: holeCardResult.ocr_text\n      };\n    }\n\n    // Next, we need to format the data into the following format:\n    // Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n    // ...\n    ).map(combinedResult => {\n      return {\n        frameIndex: combinedResult.frameIndex,\n        opponentText: combinedResult.opponentText,\n        opponentStackSize: extractStackSize(combinedResult.opponentText),\n        stackText: combinedResult.stackText,\n        stackStackSize: extractStackSize(combinedResult.stackText),\n        holeCardText: combinedResult.holeCardText,\n        timestamp: calculateTimestamp(combinedResult.frameIndex)\n      };\n    }\n\n    // Finally, we need to sort the data by frame index\n    ).sort((a, b) => a.frameIndex - b.frameIndex);\n    return combinedResults;\n  };\n  const extractStackSize = ocrText => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : \"\";\n  };\n  const calculateTimestamp = frameIndex => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n  const renderOcrResults = () => {\n    // Render the formatted OCR results\n\n    // If ocrResults is null, return a loading indicator\n    if (!ocrResults) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 14\n      }, this);\n    }\n\n    // If ocrResults is an empty array, return a message indicating that no data is available\n    if (ocrResults.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this);\n\n      // Otherwise, render the data\n    } else {\n      // Render the table headers\n\n      // First, get the keys of the first element in the array\n      const keys = Object.keys(ocrResults[0]);\n\n      // Next, render the table headers\n      const tableHeaders = keys.map(key => {\n        return /*#__PURE__*/_jsxDEV(\"th\", {\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 16\n        }, this);\n      });\n\n      // Render the table rows\n      const tableRows = ocrResults.map(ocrResult => {\n        // Render the table cells\n        const tableCells = keys.map(key => {\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            children: ocrResult[key]\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 18\n          }, this);\n        });\n\n        // Render the table row\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableCells\n        }, ocrResult.frameIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 16\n        }, this);\n      });\n\n      // Render the table\n      // Note: You can use a UI library like React Bootstrap to style the table\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableHeaders\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Video ID: \", videoId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"OCR Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), renderOcrResults()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"D9EgdiF1Nu/15seJW2SGHGGc7Mc=\", false, function () {\n  return [useParams];\n});\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getOcrResults","jsxDEV","_jsxDEV","DataDisplay","_s","videoId","ocrResults","setOcrResults","fetchOcrResults","results","console","log","formattedResults","formatOcrResults","ocr_results","error","combinedResults","Opponent","map","opponentResult","index","stackResult","Stack","holeCardResult","HoleCard","frameIndex","frame_index","opponentText","ocr_text","stackText","holeCardText","combinedResult","opponentStackSize","extractStackSize","stackStackSize","timestamp","calculateTimestamp","sort","a","b","ocrText","regex","match","frameRate","toFixed","renderOcrResults","children","fileName","_jsxFileName","lineNumber","columnNumber","length","keys","Object","tableHeaders","key","tableRows","ocrResult","tableCells","_c","$RefreshReg$"],"sources":["/root/Projects/linecheck/frontend/src/components/DataDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getOcrResults } from \"../utils/mockApiUtils\"; // Update with actual API function\n\nconst DataDisplay = () => {\n  const { videoId } = useParams();\n  const [ocrResults, setOcrResults] = useState(null);\n\n  useEffect(() => {\n    fetchOcrResults();\n  }, []);\n\n  const fetchOcrResults = async () => {\n    try {\n      const results = await getOcrResults(videoId);\n      console.log(\"Fetched OCR results:\", results); // Log the fetched results\n      const formattedResults = formatOcrResults(results.ocr_results);\n      console.log(\"Formatted OCR results:\", formattedResults); // Log the formatted results\n      setOcrResults(formattedResults);\n    } catch (error) {\n      console.error(\"Error fetching OCR results:\", error);\n    }\n  };\n\n  const formatOcrResults = (ocrResults) => {\n    // OCR Results are in the following format:\n    // {Opponent: Array(35), Stack: Array(35)}\n    // within Opponent, each element is in the following format:\n    // {frame_index: 0, ocr_text: 'Bernd siaatulaireapebnalped\\n\\n18.36 BB\\n\\f', video_id: 'd3d38c39-6d79-4f47-8b3c-e16020891efb'}\n    // It is the same for stack.\n\n    // We want to format the data into the following format:\n    // Frame 1, Stack, Opponent\n    // Frame 2, Stack, Opponent\n    // ...\n\n    // First, we need to combine the Opponent, Stack, and HoleCard arrays into a single array\n    const combinedResults = ocrResults.Opponent.map(\n      (opponentResult, index) => {\n        const stackResult = ocrResults.Stack[index];\n        const holeCardResult = ocrResults.HoleCard[index];\n        return {\n          frameIndex: opponentResult.frame_index,\n          opponentText: opponentResult.ocr_text,\n          stackText: stackResult.ocr_text,\n          holeCardText: holeCardResult.ocr_text,\n        };\n      }\n\n      // Next, we need to format the data into the following format:\n      // Frame 1, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n      // Frame 2, Opponent Text, Opponent Stack Size, Stack Text, Stack Stack Size\n      // ...\n    )\n      .map(\n        (combinedResult) => {\n          return {\n            frameIndex: combinedResult.frameIndex,\n            opponentText: combinedResult.opponentText,\n            opponentStackSize: extractStackSize(combinedResult.opponentText),\n            stackText: combinedResult.stackText,\n            stackStackSize: extractStackSize(combinedResult.stackText),\n            holeCardText: combinedResult.holeCardText,\n            timestamp: calculateTimestamp(combinedResult.frameIndex),\n          };\n        }\n\n        // Finally, we need to sort the data by frame index\n      )\n      .sort((a, b) => a.frameIndex - b.frameIndex);\n\n    return combinedResults;\n  };\n\n  const extractStackSize = (ocrText) => {\n    // Use regex or string manipulation to extract stack size from OCR text\n    // Example: \"18.36 BB\" => 18.36\n    const regex = /(\\d+\\.\\d+)\\s+BB/;\n    const match = ocrText.match(regex);\n    return match ? match[1] : \"\";\n  };\n\n  const calculateTimestamp = (frameIndex) => {\n    // Calculate timestamp based on frame index and frame rate\n    const frameRate = 30; // Replace with your video's frame rate\n    return (frameIndex / frameRate).toFixed(2);\n  };\n\n  const renderOcrResults = () => {\n    // Render the formatted OCR results\n\n    // If ocrResults is null, return a loading indicator\n    if (!ocrResults) {\n      return <p>Loading...</p>;\n    }\n\n    // If ocrResults is an empty array, return a message indicating that no data is available\n    if (ocrResults.length === 0) {\n      return <p>No data available</p>;\n\n      // Otherwise, render the data\n    } else {\n      // Render the table headers\n\n      // First, get the keys of the first element in the array\n      const keys = Object.keys(ocrResults[0]);\n\n      // Next, render the table headers\n      const tableHeaders = keys.map((key) => {\n        return <th key={key}>{key}</th>;\n      });\n\n      // Render the table rows\n      const tableRows = ocrResults.map((ocrResult) => {\n        // Render the table cells\n        const tableCells = keys.map((key) => {\n          return <td key={key}>{ocrResult[key]}</td>;\n        });\n\n        // Render the table row\n        return <tr key={ocrResult.frameIndex}>{tableCells}</tr>;\n      });\n\n      // Render the table\n      // Note: You can use a UI library like React Bootstrap to style the table\n      return (\n        <table>\n          <thead>\n            <tr>{tableHeaders}</tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </table>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h2>Data Viewer</h2>\n      <p>Video ID: {videoId}</p>\n      <p>OCR Results:</p>\n      {renderOcrResults()}\n    </div>\n  );\n};\n\nexport default DataDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
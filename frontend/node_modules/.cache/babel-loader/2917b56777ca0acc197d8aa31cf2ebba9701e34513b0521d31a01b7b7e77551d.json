{"ast":null,"code":"// utils/mockApiUtils.js\n\nconst BASE_URL = 'http://localhost:5000'; // Update this with your actual backend URL\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  const numbers = \"0123456789\";\n\n  // Generate a random 6 digit number\n  let videoId = \"\";\n  for (let i = 0; i < 6; i++) {\n    videoId += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n  return videoId;\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async videoFile => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Create a FormData object to send the video file\n  const formData = new FormData();\n  formData.append('video', videoFile);\n\n  // Simulate sending a POST request to the backend's video upload endpoint\n  try {\n    const response = await fetch(`${BASE_URL}/upload_video`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Video upload failed');\n    }\n    const data = await response.json();\n    if (data.success) {\n      return {\n        success: true,\n        videoId: data.video_id\n      }; // Update the key to \"video_id\"\n    } else {\n      throw new Error('Return of videoId failed');\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      success: false,\n      videoId: null\n    };\n  }\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\nexport const getFirstFrameUrl = async videoId => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return URL to fetch image from the backend\n  return `${BASE_URL}/images/${videoId}/frame.jpg`; // Assuming 'frame.jpg' is the filename of the first frame\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async selectedQuadrants => {\n  // Simulate a delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["BASE_URL","generateVideoId","numbers","videoId","i","charAt","Math","floor","random","length","uploadVideo","videoFile","Promise","resolve","setTimeout","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","success","video_id","error","console","getAnalysisResults","mockResults","analysisType","getFirstFrameUrl","sendGridSelection","selectedQuadrants"],"sources":["/root/Projects/linecheck/frontend/src/utils/mockApiUtils.js"],"sourcesContent":["// utils/mockApiUtils.js\n\nconst BASE_URL = 'http://localhost:5000'; // Update this with your actual backend URL\n\n// Function to generate a unique video id\nexport const generateVideoId = () => {\n  const numbers = \"0123456789\";\n\n  // Generate a random 6 digit number\n  let videoId = \"\";\n  for (let i = 0; i < 6; i++) {\n    videoId += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  }\n\n  return videoId;\n};\n\n// Mock function to simulate video upload and return a video_id\nexport const uploadVideo = async (videoFile) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Create a FormData object to send the video file\n  const formData = new FormData();\n  formData.append('video', videoFile);\n\n  // Simulate sending a POST request to the backend's video upload endpoint\n  try {\n    const response = await fetch(`${BASE_URL}/upload_video`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error('Video upload failed');\n    }\n\n    const data = await response.json();\n    \n    if (data.success) {\n      return { success: true, videoId: data.video_id }; // Update the key to \"video_id\"\n    } else {\n      throw new Error('Return of videoId failed');\n    }\n  } catch (error) {\n    console.error(error);\n    return { success: false, videoId: null };\n  }\n};\n\n// Mock function to simulate fetching analysis results from the backend\nexport const getAnalysisResults = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock analysis results\n  const mockResults = {\n    analysisType: \"OCR and Data Analysis\",\n    videoId: videoId,\n    // ... other analysis data ...\n  };\n\n  return mockResults;\n};\n\nexport const getFirstFrameUrl = async (videoId) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Return URL to fetch image from the backend\n  return `${BASE_URL}/images/${videoId}/frame.jpg`; // Assuming 'frame.jpg' is the filename of the first frame\n};\n\n// Mock function to simulate sending grid selection to the backend\nexport const sendGridSelection = async (selectedQuadrants) => {\n  // Simulate a delay\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Mock response indicating success\n  return { success: true };\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,OAAO,GAAG,YAAY;;EAE5B;EACA,IAAIC,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,OAAO,IAAID,OAAO,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,OAAO,CAACO,MAAM,CAAC,CAAC;EACvE;EAEA,OAAON,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMO,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC;;EAEnC;EACA,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEnB,QAAS,eAAc,EAAE;MACvDoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,OAAO,EAAE;MAChB,OAAO;QAAEA,OAAO,EAAE,IAAI;QAAEvB,OAAO,EAAEqB,IAAI,CAACG;MAAS,CAAC,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO;MAAEF,OAAO,EAAE,KAAK;MAAEvB,OAAO,EAAE;IAAK,CAAC;EAC1C;AACF,CAAC;;AAED;AACA,OAAO,MAAM2B,kBAAkB,GAAG,MAAO3B,OAAO,IAAK;EACnD;EACA,MAAM,IAAIS,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAMkB,WAAW,GAAG;IAClBC,YAAY,EAAE,uBAAuB;IACrC7B,OAAO,EAAEA;IACT;EACF,CAAC;;EAED,OAAO4B,WAAW;AACpB,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAO9B,OAAO,IAAK;EACjD;EACA,MAAM,IAAIS,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAQ,GAAEb,QAAS,WAAUG,OAAQ,YAAW,CAAC,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAM+B,iBAAiB,GAAG,MAAOC,iBAAiB,IAAK;EAC5D;EACA,MAAM,IAAIvB,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEzD;EACA,OAAO;IAAEa,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}